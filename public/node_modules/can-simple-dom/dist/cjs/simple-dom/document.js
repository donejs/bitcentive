/*can-simple-dom@0.4.8#simple-dom/document*/
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _node = require('./document/node.js');
var _node2 = _interopRequireDefault(_node);
var _element = require('./document/element.js');
var _element2 = _interopRequireDefault(_element);
var _text = require('./document/text.js');
var _text2 = _interopRequireDefault(_text);
var _comment = require('./document/comment.js');
var _comment2 = _interopRequireDefault(_comment);
var _documentFragment = require('./document/document-fragment.js');
var _documentFragment2 = _interopRequireDefault(_documentFragment);
var _anchorElement = require('./document/anchor-element.js');
var _anchorElement2 = _interopRequireDefault(_anchorElement);
var _inputElement = require('./document/input-element.js');
var _inputElement2 = _interopRequireDefault(_inputElement);
var _optionElement = require('./document/option-element.js');
var _optionElement2 = _interopRequireDefault(_optionElement);
var _selectElement = require('./document/select-element.js');
var _selectElement2 = _interopRequireDefault(_selectElement);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
function Document() {
    this.nodeConstructor(9, '#document', null, this);
    this.documentElement = new _element2.default('html', this);
    this.body = new _element2.default('body', this);
    this.documentElement.appendChild(this.body);
    this.appendChild(this.documentElement);
    var self = this;
    this.implementation = {
        createHTMLDocument: function createHTMLDocument(content) {
            var document = new Document();
            var frag = self.__parser.parse(content);
            var body = _element2.default.prototype.getElementsByTagName.call(frag, 'body')[0];
            var head = _element2.default.prototype.getElementsByTagName.call(frag, 'head')[0];
            if (!body && !head) {
                document.body.appendChild(frag);
            } else {
                if (body) {
                    document.documentElement.replaceChild(body, document.body);
                }
                if (head) {
                    document.documentElement.replaceChild(head, document.head);
                }
                document.documentElement.appendChild(frag);
            }
            document.__addSerializerAndParser(self.__serializer, self.__parser);
            return document;
        }
    };
}
Document.prototype = Object.create(_node2.default.prototype);
Document.prototype.constructor = Document;
Document.prototype.nodeConstructor = _node2.default;
var specialElements = {
    'a': _anchorElement2.default,
    'input': _inputElement2.default,
    'option': _optionElement2.default,
    'select': _selectElement2.default
};
Document.prototype.createElement = function (tagName) {
    var Special = specialElements[tagName.toLowerCase()];
    if (Special) {
        return new Special(tagName, this);
    }
    return new _element2.default(tagName, this);
};
Document.prototype.createTextNode = function (text) {
    return new _text2.default(text, this);
};
Document.prototype.createComment = function (text) {
    return new _comment2.default(text, this);
};
Document.prototype.createDocumentFragment = function () {
    return new _documentFragment2.default(this);
};
Document.prototype.getElementsByTagName = function (name) {
    name = name.toUpperCase();
    var elements = [];
    var cur = this.firstChild;
    while (cur) {
        if (cur.nodeType === _node2.default.ELEMENT_NODE) {
            if (cur.nodeName === name || name === '*') {
                elements.push(cur);
            }
            elements.push.apply(elements, cur.getElementsByTagName(name));
        }
        cur = cur.nextSibling;
    }
    return elements;
};
Document.prototype.getElementById = function (id) {
    return _element2.default.prototype.getElementById.apply(this.documentElement, arguments);
};
Document.prototype.__addSerializerAndParser = function (serializer, parser) {
    this.__parser = parser;
    this.__serializer = serializer;
};
if (Object.defineProperty) {
    Object.defineProperty(Document.prototype, 'currentScript', {
        get: function get() {
            var scripts = this.getElementsByTagName('script');
            var first = scripts[scripts.length - 1];
            if (!first) {
                first = this.createElement('script');
            }
            return first;
        }
    });
}
exports.default = Document;